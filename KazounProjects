getgenv().WaveStop = 0

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "L-HUB " .. Fluent.Version,
    SubTitle = "by kazoun",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do


    local Input = Tabs.Main:AddInput("SetWave", {
        Title = "Enter Number Wave To Stop:",
        Default = "",
        Placeholder = "",
        Numeric = true, -- Only allows numbers
        Finished = true, -- Only calls callback when you press enter
        Callback = function(Value)
            Fluent:Notify({
                Title = "Number Wave Alert",
                Content = "Successfully Set Wave At " .. Value,
                Duration = 5 -- Set to nil to make the notification not disappear
            })
    getgenv().WaveStop = Value
        end
    })

    local AutoStopToggle = Tabs.Main:AddToggle("AutoStopAtWaveToggle", {Title = "Auto Stop At Wave Entered", Default = false })

    local AutoSkipToggle = Tabs.Main:AddToggle("AutoSkip", {Title = "Auto Skip Instant", Default = false })

    AutoSkipToggle:OnChanged(function()
        while Options.AutoSkip.Value == true do  
            task.wait(.1)
            game:GetService("ReplicatedStorage"):WaitForChild("endpoints"):WaitForChild("client_to_server"):WaitForChild("vote_wave_skip"):InvokeServer()
            if  Options.AutoSkip.Value == false then 
                break 
              end 
            end 
        end)
    
    AutoStopToggle:OnChanged(function()
        while Options.AutoStopAtWaveToggle.Value == true do  
            task.wait(.1)
            if game:GetService("Players").LocalPlayer.PlayerGui.Waves.HealthBar.WaveNumber.Text == getgenv().WaveStop then 
            Options.AutoSkip:SetValue(false)
            Fluent:Notify({
                Title = "Stopped Alert",
                Content = "Successfully stopped!",
                Duration = 5 
            })
            end
            if  Options.AutoStopAtWaveToggle.Value == false then 
                break 
              end 
            end 
    end) 


    Tabs.Main:AddButton({
        Title = "Disable Pop Up Red Text GUI",
        Description = "Very important button",
        Callback = function()
            game:GetService("Players").LocalPlayer.PlayerGui.MessageGui.Enabled= false
        end
    })


    Tabs.Main:AddButton({
        Title = "Remove Units + Enemies [ VISUAL PREVENT LAG ]",
        Description = "use this if ur game start lagging or u done upgraded all ur units",
        Callback = function()
            Window:Dialog({
                Title = "Hey!",
                Content = "Are you read what i said? u cant replay after use this!",
                Buttons = {
                    {
                        Title = "Yes and i want to use it.",
                        Callback = function()
                            for i,v in pairs(workspace._UNITS:GetChildren()) do 
                                v:Destroy()
                                end
                        end
                    },
                    {
                        Title = "No i didnt, lemme read it again",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })


end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
